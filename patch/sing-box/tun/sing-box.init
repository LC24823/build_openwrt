#!/bin/sh /etc/rc.common

USE_PROCD=1
START=99

PROG="$(which sing-box)"

start_service() {
    config_load sing-box

    local enabled; config_get_bool enabled "main" "enabled" 0
    [ "$enabled" = "1" ] || return 0

    local conffile workdir remote url auto_restart restart_cron
    config_get conffile "main" "conffile" "/etc/sing-box/config.json"
    config_get workdir "main" "workdir" "/etc/sing-box"
    config_get remote "subscription" "remote" 1
    config_get url "subscription" "url"
    config_get_bool auto_restart "subscription" "auto_restart"
    config_get restart_cron "subscription" "restart_cron" "0 5 * * *"

    local level output external_controller_port external_ui secret ui_name default_mode store_fakeip mtu mixed_port
    config_get level "log" "level" "warn"
    config_get output "log" "output" "/var/log/sing-box.log"
    config_get external_controller_port "experimental" "external_controller_port" "9900"
    config_get external_ui "experimental" "external_ui" "ui"
    config_get secret "experimental" "secret" "ffuqiangg"
    config_get ui_name "experimental" "ui_name" "metacubexd"
    config_get default_mode "experimental" "default_mode" "rule"
    config_get_bool store_fakeip "experimental" "store_fakeip" 0
    config_get mtu "inbounds" "mtu" "9000"
    config_get mixed_port "inbounds" "mixed_port" "2080"

    local profile_file a
    if [ "$remote" -gt "0" ] && [ -n "$url" ]; then
        a=1
        for i in $url; do
            if (curl -s -f -A sing-box --connect-timeout 15 --retry 3 -L -X GET -o $workdir/config.tmp $i); then
                mv $workdir/config.tmp $workdir/subscription$a.json
            else
                [ -f "$workdir/config.tmp" ] && rm -f $workdir/config.tmp
            fi
            let a++
        done
        if [ -f "$workdir/subscription$remote.json" ]; then
            profile_file="$workdir/subscription$remote.json"
        else
            return 0
        fi
    elif [ "$remote" = "0" ] || [ "$remote" = "-1" ] && [ -f "$workdir/sing-box.json" ]; then
        profile_file="$workdir/sing-box.json"
    else
        return 0
    fi

    local log experimental inbounds direct_tag ui_url
    if [ "$store_fakeip" = "1" ]; then store_fakeip='true'; else store_fakeip='false'; fi
    direct_tag=$(jq -r '.outbounds[] | select(.type=="direct") | .tag' $profile_file)
    ui_url='https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'
    [ "$ui_name" = "zashboard" ] && ui_url='https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip'
    [ "$ui_name" = "yacd" ] && ui_url='https://github.com/MetaCubeX/Yacd-meta/archive/refs/heads/gh-pages.zip'
    log="{
          \"disabled\":false,
          \"level\":\"$level\",
          \"output\":\"$output\",
          \"timestamp\":true
        }"
    experimental="{
        \"clash_api\":{
          \"external_controller\":\"0.0.0.0:$external_controller_port\",
          \"external_ui\":\"$external_ui\",
          \"secret\":\"$secret\",
          \"external_ui_download_url\":\"https://gh-proxy.com/$ui_url\",
          \"external_ui_download_detour\":\"$direct_tag\",
          \"default_mode\":\"$default_mode\"},
        \"cache_file\":{
          \"enabled\":true,
          \"store_fakeip\":$store_fakeip}
        }"
    inbounds="[{
          \"auto_route\":true,
          \"strict_route\":true,
          \"endpoint_independent_nat\":false,
          \"address\":\"172.18.0.1/30\",
          \"mtu\":$mtu,
          \"sniff\":true,
          \"sniff_override_destination\":false,
          \"tag\":\"tun-in\",
          \"type\":\"tun\"
        },{
          \"type\":\"mixed\",
          \"listen\":\"::\",
          \"listen_port\":$mixed_port,
          \"sniff\":true
        }]"

    if [ "$remote" = "-1" ]; then
        cp -f $profile_file $conffile
    else
        route_rules_dns='[{"action":"sniff"},{"protocol":"dns","action":"hijack-dns"}]'
        if [ -n "$(jq '.route.rules[] | select(.action)' $profile_file)" ]; then
            route_rules=$(cat $profile_file | \
                jq --argjson route_rules_dns $route_rules_dns \
                '.route.rules |
                del(.[] | select(.action=="sniff" or .action=="hijack-dns" or .action=="resolve")) |
                $route_rules_dns + .')
            jq --argjson log "$log" \
               --argjson experimental "$experimental" \
               --argjson inbounds "$inbounds" \
               --argjson route_rules "$route_rules" \
               '.log=$log | .experimental=$experimental | .inbounds=$inbounds | .route.rules=$route_rules' \
               $profile_file \
               > $conffile
        else
            block_tag=$(jq -r '.outbounds[] | select(.type=="block") | .tag' $profile_file)
            route_rules=$(cat $profile_file | \
                jq --argjson route_rules_dns $route_rules_dns \
                '.route.rules |
                del(.[] | select(.protocol=="dns")) |
                $route_rules_dns + .' | \
                sed "s/\"outbound\": \"$block_tag\"/\"action\": \"reject\"/g")
            jq --argjson log "$log" \
               --argjson experimental "$experimental" \
               --argjson inbounds "$inbounds" \
               --argjson route_rules "$route_rules" \
               '.log=$log | .experimental=$experimental | .inbounds=$inbounds | .route.rules=$route_rules' \
               $profile_file | \
               jq 'del(.outbounds[] | select(.type=="dns" or .type=="block"))' \
               > $conffile
        fi
    fi
    
    local mixin mixfile
    config_get mixin "mix" "mixin" 0
    config_get mixfile "mix" "mixfile" "/etc/sing-box/mixin.json"
    if [ "$mixin" = "1" ] && [ -f "$mixfile" ]; then
        jq -s add $conffile $mixfile > $workdir/config.tmp && mv $workdir/config.tmp $conffile
    fi

    procd_open_instance sing-box
    procd_set_param command $PROG run -c $conffile -D $workdir

    procd_set_param user root
    procd_set_param file $conffile
    procd_set_param limits core="unlimited"
    procd_set_param limits nofile="1000000 1000000"
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param respawn

    procd_close_instance

    if [ "$auto_restart" = "1" ]; then
        sed -i '/sing-box/d' /etc/crontabs/root
        echo -e "$restart_cron /etc/init.d/sing-box restart" >> /etc/crontabs/root
        /etc/init.d/cron restart
    fi
}

stop_service() {
    config_load sing-box

    local output; config_get output "log" "output" "/var/log/sing-box.log"
    rm -f $output

    sed -i '/sing-box/d' /etc/crontabs/root
    /etc/init.d/cron restart
}
